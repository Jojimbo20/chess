21/11
    Added all pieces 
    Added their move matrices 
    Added the Calculate Postion function
    Added a print_moves() function to show moves

    NEXT:
        Add a matrix of pieces to the Board class
        Add a List of pieces to the player classs

22/11
    Added a pieces[] to <Player> 
    Added an __init__ to <Player>
    Added Player.print_pieces()

    NEXT:
        Add a matrix of pieces to the Board class

    Would be nice:
        Format Player.print_pieces() to have all coordinates line up
        For Piece.calculate_moves() Have it so that the generated possible_moves[] only includes possible moves and not [-1,-1] to represent illegal moves
26/11 
 Added board.update(p1,p2)
        Gets all of the pieces in p1 and p2's pieces[]
        Adds them to the board. 

    NEXT:
        Add a way of moving pieces on the board. 

    Would be nice:
        Format Player.print_pieces() to have all coordinates line up
        For Piece.calculate_moves() Have it so that the generated possible_moves[] only includes possible moves and not [-1,-1] to represent illegal moves

27/11 
        Updated player.pieces from list to dictionary,
        Ease of lookup and piece manipulation improved as a result... 


01/12 
        Overall changes: 
            Added a print funtion to each class module for checking of successful access.
            The board can now register moves and disallows the movement if the move is out of bounds or occupied by friendly.
            
        Board:
            Added __init__(self, p1,p2) It's easier for reading if the board has player references
            Added update(self) Resets the board to zero, re-populates matrix with pieces current positions. 
            Added register_move(self, _piece, _pos_a, _pos_b)
            Added is_legal_move(self, _piece, _pos_a, _pos_b):
            Added calculate_moves(self, _piece):
            
        Pieces:
            Added get functions; name, colour
            Added possible moves[] to the parent class
            Moved calculate_moves() to board class for access to all pieces positions in the game
    NEXT:
            Make sure all pieces move accordingly, 
                (King doesn't put himself in danger) 
                (Pawns only take diagonally)
                (Units can't ghost through other units)(Queen, rook, bishop)
            Add taking of pieces            
            Add score keeping 
            Add check condition
            Add check mate condition


    Would be nice:
        Format Player.print_pieces() to have all coordinates line up
        For Piece.calculate_moves() Have it so that the generated possible_moves[] only includes possible moves and not [-1,-1] to represent illegal moves
        Represent pieces in a nice printed way. 
        Type commands into command line

03/12 
        Overall changes:         
        Pawns can now only take diagonally and when space is occupied by enemy
        Pawns can't march when space is occupied       
        Units can't ghost through other units, Queen, rook, bishop
        Added "Illegal move: Path blocked" error messages for Queen, Bishop and Rook
        Added "Illegal move: Space occupied by friendly" Error message
        Added "Illegal move: Pawn can't attack forwards. 

            
        Board:
            Added path_is_blocked()
            Added get_space()
            
        Pieces:
            Added is_in_moveset()

        Player:
            Added pieces_taken{}

    NEXT:
            Make sure all pieces move accordingly,                 
                (King doesn't put himself in danger)
            Implement type catchers on is_legal_move()
                Pawn Done
                Bishop Done
                Rook
                Queen
                King 

            Add taking of pieces         
            Pawns turn into a different piece when they make it to the top. 
            Add score keeping 
            Add check condition
            Add check mate condition

    Would be nice:
        Format Player.print_pieces() to have all coordinates line up        
        Represent pieces in a nice printed way. 
        Type commands into command line

04/12 
        Overall changes:         
        Attacking and taking of pieces now works as it should
        Added a way of checking a players score (Total of taken pieces)
            
        Board:
            Added attack_square()
            Added an is_alive() check to is_legal_move()
            
        Pieces:
            moved name variable into  __init__()
            Added kill(self)
            Added is_alive()

        Player:
            Added get_colour()
            Added self.score
            Added get_score()
            Added kill_piece()
            Added take_piece()
            Changed the naning properties of the pieces so that passing of names is easier and displaying of names is more specific. 

    NEXT:
            Make sure all pieces move accordingly,                 
                (King doesn't put himself in danger)
            Implement type catchers on is_legal_move()
                Pawn Done
                Bishop Done
                Rook
                Queen
                King 

            Pawns turn into a different piece when they make it to the top. 
            Add score keeping 
            Add check condition
            Add check mate condition

    Would be nice:
        Format Player.print_pieces() to have all coordinates line up        
        Represent pieces in a nice printed way. 
        Type commands into command line


08/12 
        BUGS >@<
            ATTEMPTING TO MOVE A FALLEN PIECE
            If an attempted move is made on a piece that has fallen, an error is thrown
                The cause of this is to do with how pieces are taken, 
                First they're added into player1.pieces_taken{}
                The piece is then deleted from player2.pieces{}
                So when 
                board.register_move(Player_B.pieces["FALLEN_PIECE"], pos_a, pos_b)            
                Is called, it's actually referencing a key pair that doesn't exist within the dictionary. 

                The fix will have to be implemented later on when I implement a way of user input, 
                With a catch to throw the error that the piece isn't alive before passing it to that function
    

        Overall changes:
        Pawns can now move two spaces forward on the first go (BUGGY)
        King can't put himself in danger 
        Added check condition
        Fixed the Pawn not being able to move two spaces on first go after one pawn has moved. 
            
        Board:
            Added check_enemy()
            Added uncheck_self()
            Added puts_enemy_king_in_check()
            Added puts_king_in_check()
            
            
        Pieces:
            Added first move conditions to Pawn_W and Pawn_B

        Player:

    NEXT:
            Pawns can move 2 forward on first turn (Half implemented - see bugs)
            Pawns turn into a different piece when they make it to the top. 
            Add check mate condition

    Would be nice:
        Format Player.print_pieces() to have all coordinates line up        
        Represent pieces in a nice printed way. 
        Type commands into command line

10/12 
        BUGS >@<
            ATTEMPTING TO MOVE A FALLEN PIECE
            If an attempted move is made on a piece that has fallen, an error is thrown
                The cause of this is to do with how pieces are taken, 
                First they're added into player1.pieces_taken{}
                The piece is then deleted from player2.pieces{}
                So when 
                board.register_move(Player_B.pieces["FALLEN_PIECE"], pos_a, pos_b)            
                Is called, it's actually referencing a key pair that doesn't exist within the dictionary. 
                The fix will have to be implemented later on when I implement a way of interacting with the board Library
                With a catch to throw the error that the piece isn't alive before passing it to that functions

                King throwing Illegal move:  Puts self in check error when it's a legal move
                Something to do with Bishop returning path clear in puts_king_in_check()
    

        Overall changes:
            
            
        Board:
            __init__() no longer requires player references
            Added valid_names tuple
            Added a Move counter (Yet to implement fucntionality)
            Added is_valid_name()
            Changed register_move() funcitonality
                Is now used as such register_move(player, piece, pos_a, pos_b) where 'player' and 'piece' are string references
            Fixed some King check bugs
            Cleaned up is_legal_move() for readability and removed redundant code

            
            
        Pieces:

        Player:

    NEXT:
            Fix King throwing Illegal move bug
            Pawns turn into a different piece when they make it to the top.
            Add check mate condition

    Would be nice:
        Add board.move_counter() functionality
        Format Player.print_pieces() to have all coordinates line up        
        Represent pieces in a nice printed way. 
        Type commands into command line

11/12 
        BUGS >@<
            ATTEMPTING TO MOVE A FALLEN PIECE
            If an attempted move is made on a piece that has fallen, an error is thrown
                The cause of this is to do with how pieces are taken, 
                First they're added into player1.pieces_taken{}
                The piece is then deleted from player2.pieces{}
                So when 
                board.register_move(Player_B.pieces["FALLEN_PIECE"], pos_a, pos_b)            
                Is called, it's actually referencing a key pair that doesn't exist within the dictionary. 
                The fix will have to be implemented later on when I implement a way of interacting with the board Library
                With a catch to throw the error that the piece isn't alive before passing it to that functions

    

        Overall changes:
            Fixed Github Issue #1: King throwing "Illegal move: Puts self in check" error when it's a legal move
            Fixed Github Issue #3: No indication that enemy King is in check when such a move is made 
            Changed the orders of newlines for cleaner readability in the terminal 
            
            
        Board:
            Added king_check_printer():
                Just makes things a bit cleaner in the register_move() function

            Changed puts_king_in_check() 
            Changed puts_enemy_king_in_check()
                Functions no longer instantiate new instances of Board, it was unnessesary
                They now make the changes on the current board, then undo them at the end of the fucntion. 

            Fixed check_enemy() 
            Fixed uncheck_self()          
            
        Pieces:
            
        Player:

    NEXT:
            Pawns turn into a different piece when they make it to the top.
            Add check mate condition

    Would be nice:
        Add board.move_counter() functionality
        Format Player.print_pieces() to have all coordinates line up        
        Represent pieces in a nice printed way. 
        Type commands into command line

12/12 
        BUGS >@<
            Github Issue #4: King being shown as in check when an enemy move takes him out of check
    

        Overall changes:
            Added Pawn Promotion:
                Pawns get promoted into a different piece when they make it to the top.
                Anything other than Pawn or King

            Fixed Github issue #2 If an attempted move is made on a piece that has fallen, a fatal error is thrown
            
            
        Board:
            Added is_valid_promotion()
            Fixed puts_enemy_in_check()

        Pieces:


        Player:
            Added pieces_promoted = {}
            Added add_piece()
            Added promote_pawn()
            Added get_piece_names()
            Added is_legal_pos()
            Added get_instances()
            Added get_live_names()

    NEXT:
            Add castling:
                ---
                The king and the Rook move towards eachother and swap places.
                In order to do this, move your ing not one, but two spaces towards the rook you are castling with
                Then place the Rook on the opposite side of the King. 
                ---
                Prerequisites:
                    - The King and rook may not have moved,
                    - There must not be any obstruction between the pieces
                    - The King cannot move through Check 
            
            Add En Passant:
                ---
                A pawn moving forward two squares on the first turn can be captured "En passant" by an enemy pawn
                If and only if it has moved two spaces (First turn)
                And it lands next to the enemy Pawn. 
                The capturing pawn takes the moving Pawn by attacking the square behind the moving pawn. 
                ---

            Add check mate condition

    Would be nice:
        Add board.move_counter() functionality
        Add a dictionary to track moves and events 
        Format Player.print_pieces() to have all coordinates line up        
        Represent pieces in a nice printed way. 
        Type commands into command line

15/12 
        BUGS >@<
            Github Issue #4: King being shown as in check when an enemy move takes him out of check
    

        Overall changes:
            Added Castling. 
            
            
        Board:
            Added is_legal_castle()
            Added castle()
            Moved the functions around

        Pieces:           
            Added first_turn to all pieces
            Added first_turn_complete()
            Added Castling movements to King's moveset

        Player:
            Added the full piece names to valid_names tuple
            Added is_legal_name()


    NEXT:   
            Test castling:
                    King's moveset is removed after the first turn and he can't move left and right two.
                    All instances of castling    

            Investigate:
            Github Issue 4: King being shown as in check when an enemy move takes him out of check
            Github Issue 5: Pawn reaching otherside dialogue being triggered when it shouldn't

            Add En Passant:
                ---
                A pawn moving forward two squares on the first turn can be captured "En passant" by an enemy pawn
                If and only if it has moved two spaces (First turn)
                And it lands next to the enemy Pawn. 
                The capturing pawn takes the moving Pawn by attacking the square behind the moving pawn. 
                ---

            Add check mate condition

    Would be nice:
        Add board.move_counter() functionality
        Add a dictionary to track moves and events 
        Format Player.print_pieces() to have all coordinates line up        
        Represent pieces in a nice printed way. 
        Type commands into command line