21/11
    Added all pieces 
    Added their move matrices 
    Added the Calculate Postion function
    Added a print_moves() function to show moves

    NEXT:
        Add a matrix of pieces to the Board class
        Add a List of pieces to the player classs

22/11
    Added a pieces[] to <Player> 
    Added an __init__ to <Player>
    Added Player.print_pieces()

    NEXT:
        Add a matrix of pieces to the Board class

    Would be nice:
        Format Player.print_pieces() to have all coordinates line up
        For Piece.calculate_moves() Have it so that the generated possible_moves[] only includes possible moves and not [-1,-1] to represent illegal moves
26/11 
 Added board.update(p1,p2)
        Gets all of the pieces in p1 and p2's pieces[]
        Adds them to the board. 

    NEXT:
        Add a way of moving pieces on the board. 

    Would be nice:
        Format Player.print_pieces() to have all coordinates line up
        For Piece.calculate_moves() Have it so that the generated possible_moves[] only includes possible moves and not [-1,-1] to represent illegal moves

27/11 
        Updated player.pieces from list to dictionary,
        Ease of lookup and piece manipulation improved as a result... 


01/12 
        Overall changes: 
            Added a print funtion to each class module for checking of successful access.
            The board can now register moves and disallows the movement if the move is out of bounds or occupied by friendly.
            
        Board:
            Added __init__(self, p1,p2) It's easier for reading if the board has player references
            Added update(self) Resets the board to zero, re-populates matrix with pieces current positions. 
            Added register_move(self, _piece, _pos_a, _pos_b)
            Added is_legal_move(self, _piece, _pos_a, _pos_b):
            Added calculate_moves(self, _piece):
            
        Pieces:
            Added get functions; name, colour
            Added possible moves[] to the parent class
            Moved calculate_moves() to board class for access to all pieces positions in the game
    NEXT:
            Make sure all pieces move accordingly, 
                (King doesn't put himself in danger) 
                (Pawns only take diagonally)
                (Units can't ghost through other units)(Queen, rook, bishop)
            Add taking of pieces            
            Add score keeping 
            Add check condition
            Add check mate condition


    Would be nice:
        Format Player.print_pieces() to have all coordinates line up
        For Piece.calculate_moves() Have it so that the generated possible_moves[] only includes possible moves and not [-1,-1] to represent illegal moves
        Represent pieces in a nice printed way. 
        Type commands into command line

    03/12 
        Overall changes:         
        Pawns can now only take diagonally and when space is occupied by enemy
        Pawns can't march when space is occupied       
        Units can't ghost through other units, Queen, rook, bishop
        Added "Illegal move: Path blocked" error messages for Queen, Bishop and Rook
        Added "Illegal move: Space occupied by friendly" Error message
        Added "Illegal move: Pawn can't attack forwards. 

            
        Board:
            Added path_is_blocked()
            Added get_space()
            
        Pieces:
            Added is_in_moveset()

        Player:
            Added pieces_taken{}

    NEXT:
            Make sure all pieces move accordingly,                 
                (King doesn't put himself in danger)
            Implement type catchers on is_legal_move()
                Pawn Done
                Bishop Done
                Rook
                Queen
                King 

            Add taking of pieces         
            Pawns turn into a different piece when they make it to the top. 
            Add score keeping 
            Add check condition
            Add check mate condition

    Would be nice:
        Format Player.print_pieces() to have all coordinates line up        
        Represent pieces in a nice printed way. 
        Type commands into command line

    04/12 
        Overall changes:         
        Attacking and taking of pieces now works as it should
        Added a way of checking a players score (Total of taken pieces)
            
        Board:
            Added attack_square()
            Added an is_alive() check to is_legal_move()
            
        Pieces:
            moved name variable into  __init__()
            Added kill(self)
            Added is_alive()

        Player:
            Added get_colour()
            Added self.score
            Added get_score()
            Added kill_piece()
            Added take_piece()
            Changed the naning properties of the pieces so that passing of names is easier and displaying of names is more specific. 

    NEXT:
            Make sure all pieces move accordingly,                 
                (King doesn't put himself in danger)
            Implement type catchers on is_legal_move()
                Pawn Done
                Bishop Done
                Rook
                Queen
                King 

            Pawns turn into a different piece when they make it to the top. 
            Add score keeping 
            Add check condition
            Add check mate condition

    Would be nice:
        Format Player.print_pieces() to have all coordinates line up        
        Represent pieces in a nice printed way. 
        Type commands into command line


    08/12 
        BUGS >@<
            ATTEMPTING TO MOVE A FALLEN PIECE
            If an attempted move is made on a piece that has fallen, an error is thrown
                The cause of this is to do with how pieces are taken, 
                First they're added into player1.pieces_taken{}
                The piece is then deleted from player2.pieces{}
                So when 
                board.register_move(Player_B.pieces["FALLEN_PIECE"], pos_a, pos_b)            
                Is called, it's actually referencing a key pair that doesn't exist within the dictionary. 

                The fix will have to be implemented later on when I implement a way of user input, 
                With a catch to throw the error that the piece isn't alive before passing it to that function
    

        Overall changes:
        Pawns can now move two spaces forward on the first go (BUGGY)
        King can't put himself in danger 
        Added check condition
        Fixed the Pawn not being able to move two spaces on first go after one pawn has moved. 
            
        Board:
            Added check_enemy()
            Added uncheck_self()
            Added puts_enemy_king_in_check()
            Added puts_king_in_check()
            
            
        Pieces:
            Added first move conditions to Pawn_W and Pawn_B

        Player:

    NEXT:
            Pawns can move 2 forward on first turn (Half implemented - see bugs)
            Pawns turn into a different piece when they make it to the top. 
            Add check mate condition

    Would be nice:
        Format Player.print_pieces() to have all coordinates line up        
        Represent pieces in a nice printed way. 
        Type commands into command line